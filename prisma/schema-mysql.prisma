datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum UserRole {
  USER
  ADMIN
}

model ExtendedProfile {
  id        Int    @id @default(autoincrement())
  biography String
  user      User   @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  role          UserRole       @default(USER)
  posts         Post[]
  profile       ExtendedProfile?
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id         Int        @id @default(autoincrement())
  name_publication String
  fio_author String
  place_work_performers String
  abstract_publication_rus String
  abstract_publication_eng String
  lang_publication String
  keywords String
  volume_publication String
  output_data String
  attach_publication Json?
  published  Boolean    @default(true)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Json?
  createdAt     DateTime  @default(now())
  editedAt     DateTime  @default(now())

  // views      Int        @default(0)
  // likes      Int        @default(0)
  type_publication Type_Publication[]
}

model Type_Publication {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}



